using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using AdminWeb.Areas.Admin.Models;

namespace AdminWeb.Areas.Admin.Data.Services
{
    public class UserService
    {
        private readonly HttpClient _httpClient;
        private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };
        // Base API url (khai b√°o ·ªü ApiConstants ho·∫∑c appsettings)
        private readonly string _userApi = ApiConstants.UserApi; // v√≠ d·ª• "http://localhost:7245/api/user"

        public UserService(HttpClient httpClient)
        {
            _httpClient = httpClient;
            // n·∫øu mu·ªën set base address: _httpClient.BaseAddress = new Uri(ApiConstants.BaseApiUrl);
        }

        // L·∫•y to√†n b·ªô users (tr·∫£ v·ªÅ List<UserViewModel>)
        public async Task<List<UserViewModel>> GetAllUsersAsync()
        {
            var resp = await _httpClient.GetAsync(_userApi);
            if (!resp.IsSuccessStatusCode) return new List<UserViewModel>();

            var body = await resp.Content.ReadAsStringAsync();
            var apiResp = JsonSerializer.Deserialize<ApiResponse<List<UserViewModel>>>(body, _jsonOptions);
            return apiResp?.Data ?? new List<UserViewModel>();
        }

        // L·∫•y theo id (tr·∫£ v·ªÅ UserViewModel? ƒë·ªÉ controller check null)
        public async Task<UserViewModel?> GetUserByIdAsync(int id)
        {
            var resp = await _httpClient.GetAsync($"{_userApi}/{id}");
            if (!resp.IsSuccessStatusCode) return null;

            var body = await resp.Content.ReadAsStringAsync();
            var apiResp = JsonSerializer.Deserialize<ApiResponse<UserViewModel>>(body, _jsonOptions);
            return apiResp?.Data;
        }

        // T√¨m ki·∫øm (tr·∫£ List<UserViewModel>)
        public async Task<List<UserViewModel>> SearchUsersAsync(string keyword)
        {
            if (string.IsNullOrWhiteSpace(keyword)) return new List<UserViewModel>();

            // S·ª≠a endpoint ƒë√∫ng v·ªõi API
            var resp = await _httpClient.GetAsync($"{_userApi}/search?keyword={Uri.EscapeDataString(keyword)}");

            if (!resp.IsSuccessStatusCode) return new List<UserViewModel>();

            var body = await resp.Content.ReadAsStringAsync();
            var apiResp = JsonSerializer.Deserialize<ApiResponse<List<UserViewModel>>>(body, _jsonOptions);
            return apiResp?.Data ?? new List<UserViewModel>();
        }

        // T·∫°o user (tr·∫£ ApiResponse<UserViewModel> ƒë·ªÉ controller ki·ªÉm tra Success)
        public async Task<ApiResponse<UserViewModel>> CreateUserAsync(UserCreateModel model)
        {
            var json = JsonSerializer.Serialize(model);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var resp = await _httpClient.PostAsync(_userApi, content);
            var body = await resp.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<ApiResponse<UserViewModel>>(body, _jsonOptions)
                   ?? new ApiResponse<UserViewModel> { Success = false, Message = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi" };
        }

        // C·∫≠p nh·∫≠t user
        public async Task<ApiResponse<UserViewModel>> UpdateUserAsync(int id, UserEditModel model)
        {
            try
            {
                //// ü©µ L·∫•y d·ªØ li·ªáu c≈© t·ª´ API ƒë·ªÉ gi·ªØ nguy√™n Role n·∫øu kh√¥ng thay ƒë·ªïi
                //var currentUser = await GetUserByIdAsync(id);
                //if (currentUser == null)
                //    return new ApiResponse<UserViewModel> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

                //// ‚úÖ N·∫øu model.Role r·ªóng th√¨ gi·ªØ role c≈©
                //if (model.Role == null || string.IsNullOrEmpty(model.Role.ToString()))
                //    model.Role = currentUser.Role;

                var json = JsonSerializer.Serialize(model);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                var resp = await _httpClient.PutAsync($"{_userApi}/{id}", content);

                if (!resp.IsSuccessStatusCode)
                {
                    var msg = await resp.Content.ReadAsStringAsync();
                    return new ApiResponse<UserViewModel>
                    {
                        Success = false,
                        Message = !string.IsNullOrEmpty(msg) ? msg : "L·ªói khi c·∫≠p nh·∫≠t user"
                    };
                }

                var body = await resp.Content.ReadAsStringAsync();
                var apiResp = JsonSerializer.Deserialize<ApiResponse<UserViewModel>>(body, _jsonOptions);
                return apiResp ?? new ApiResponse<UserViewModel> { Success = false, Message = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi" };
            }
            catch (Exception ex)
            {
                return new ApiResponse<UserViewModel> { Success = false, Message = ex.Message };
            }
        }


        // X√≥a user (tr·∫£ ApiResponse<bool>)
        public async Task<ApiResponse<bool>> DeleteUserAsync(int id)
        {
            var resp = await _httpClient.DeleteAsync($"{_userApi}/{id}");
            var body = await resp.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<ApiResponse<bool>>(body, _jsonOptions)
                   ?? new ApiResponse<bool> { Success = false, Message = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi" };
        }
    }
}
