using AdminWeb.Areas.Admin.Data.Services;
using AdminWeb.Areas.Admin.Models;
using Microsoft.AspNetCore.Mvc;

namespace AdminWeb.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class ProductController : Controller
    {
        private readonly ProductService _productService;
        private readonly CategoryService _categoryService;

        public ProductController(ProductService productService, CategoryService categoryService)
        {
            _productService = productService;
            _categoryService = categoryService;
        }

        /// <summary>
        /// GET: /Admin/Product - Hi·ªÉn th·ªã danh s√°ch products
        /// </summary>
        public async Task<IActionResult> Index(string? searchString, int? categoryId)
        {
            Console.WriteLine($"üìã [ProductController.Index] B·∫Øt ƒë·∫ßu - SearchString: {searchString}, CategoryId: {categoryId}");
            
            ViewBag.SearchString = searchString;
            ViewBag.CategoryId = categoryId;

            try
            {
                List<ProductViewModel> products;

                // G·ªçi API th√¥ng qua ProductService
                if (!string.IsNullOrEmpty(searchString) || categoryId.HasValue)
                {
                    Console.WriteLine("üîç [ProductController.Index] Th·ª±c hi·ªán t√¨m ki·∫øm s·∫£n ph·∫©m");
                    var searchModel = new ProductSearchModel 
                    { 
                        SearchTerm = searchString,
                        CategoryId = categoryId
                    };
                    products = await _productService.SearchProductsAsync(searchModel);
                    Console.WriteLine($"‚úÖ [ProductController.Index] T√¨m ki·∫øm ho√†n t·∫•t. T√¨m th·∫•y {products.Count} s·∫£n ph·∫©m");
                }
                else
                {
                    Console.WriteLine("üì¶ [ProductController.Index] L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m");
                    products = await _productService.GetAllProductsAsync();
                    Console.WriteLine($"‚úÖ [ProductController.Index] L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m ho√†n t·∫•t. T·ªïng: {products.Count} s·∫£n ph·∫©m");
                }

                // L·∫•y categories ƒë·ªÉ hi·ªÉn th·ªã trong dropdown
                Console.WriteLine("üìÇ [ProductController.Index] ƒêang l·∫•y danh s√°ch categories");
                var categories = await _categoryService.GetAllCategoriesAsync();
                ViewBag.Categories = categories;
                Console.WriteLine($"‚úÖ [ProductController.Index] L·∫•y categories ho√†n t·∫•t. T·ªïng: {categories.Count} categories");

                return View(products);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.Index] L·ªói: {ex.Message}");
                ViewBag.Error = $"L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m: {ex.Message}";
                ViewBag.ErrorDetail = "Vui l√≤ng ki·ªÉm tra API ƒë√£ ch·∫°y ch∆∞a ho·∫∑c k·∫øt n·ªëi m·∫°ng.";
                ViewBag.Categories = new List<CategoryViewModel>();
                return View(new List<ProductViewModel>());
            }
        }

        /// <summary>
        /// GET: /Admin/Product/Create - Hi·ªÉn th·ªã form t·∫°o m·ªõi
        /// </summary>
        public async Task<IActionResult> Create()
        {
            Console.WriteLine("‚ûï [ProductController.Create GET] Hi·ªÉn th·ªã form t·∫°o s·∫£n ph·∫©m m·ªõi");

            try
            {
                // L·∫•y categories ƒë·ªÉ hi·ªÉn th·ªã trong dropdown
                var categories = await _categoryService.GetAllCategoriesAsync();
                ViewBag.Categories = categories;
                
                Console.WriteLine($"‚úÖ [ProductController.Create GET] L·∫•y {categories.Count} categories th√†nh c√¥ng");
                return View(new ProductCreateModel());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.Create GET] L·ªói: {ex.Message}");
                TempData["ErrorMessage"] = $"L·ªói khi t·∫£i d·ªØ li·ªáu: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        /// <summary>
        /// POST: /Admin/Product/Create - X·ª≠ l√Ω t·∫°o product m·ªõi
        /// </summary>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(ProductCreateModel model)
        {
            Console.WriteLine($"üíæ [ProductController.Create POST] B·∫Øt ƒë·∫ßu t·∫°o s·∫£n ph·∫©m: {model.Name}");
            Console.WriteLine($"üìä [ProductController.Create POST] CategoryId: {model.CategoryId}, Price: {model.Price}, Stock: {model.StockQuantity}");

            if (!ModelState.IsValid)
            {
                Console.WriteLine("‚ö†Ô∏è [ProductController.Create POST] Model validation failed");
                
                // Reload categories n·∫øu c√≥ l·ªói validation
                try
                {
                    var categories = await _categoryService.GetAllCategoriesAsync();
                    ViewBag.Categories = categories;
                }
                catch
                {
                    ViewBag.Categories = new List<CategoryViewModel>();
                }
                return View(model);
            }

            try
            {
                Console.WriteLine("üöÄ [ProductController.Create POST] G·ªçi ProductService.CreateProductAsync");
                var result = await _productService.CreateProductAsync(model);
                
                Console.WriteLine($"üìä [ProductController.Create POST] API Response - Success: {result.Success}, Message: {result.Message}");
                
                if (result.Success)
                {
                    Console.WriteLine("‚úÖ [ProductController.Create POST] T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!");
                    TempData["SuccessMessage"] = result.Message ?? "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!";
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è [ProductController.Create POST] T·∫°o s·∫£n ph·∫©m th·∫•t b·∫°i: {result.Message}");
                    ModelState.AddModelError("", result.Message ?? "C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m");
                    
                    // Reload categories
                    var categories = await _categoryService.GetAllCategoriesAsync();
                    ViewBag.Categories = categories;
                    return View(model);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.Create POST] Exception: {ex.Message}");
                ModelState.AddModelError("", $"L·ªói h·ªá th·ªëng: {ex.Message}");
                
                // Reload categories
                try
                {
                    var categories = await _categoryService.GetAllCategoriesAsync();
                    ViewBag.Categories = categories;
                }
                catch
                {
                    ViewBag.Categories = new List<CategoryViewModel>();
                }
                return View(model);
            }
        }

        /// <summary>
        /// GET: /Admin/Product/Edit/5 - Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
        /// </summary>
        public async Task<IActionResult> Edit(int id)
        {
            Console.WriteLine($"‚úèÔ∏è [ProductController.Edit GET] Hi·ªÉn th·ªã form ch·ªânh s·ª≠a s·∫£n ph·∫©m ID: {id}");

            try
            {
                var product = await _productService.GetProductByIdAsync(id);
                if (product == null)
                {
                    Console.WriteLine($"‚ö†Ô∏è [ProductController.Edit GET] Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID: {id}");
                    TempData["ErrorMessage"] = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                    return RedirectToAction(nameof(Index));
                }

                Console.WriteLine($"‚úÖ [ProductController.Edit GET] L·∫•y s·∫£n ph·∫©m th√†nh c√¥ng: {product.Name}");

                // Convert sang EditModel
                var editModel = new ProductEditModel
                {
                    ProductId = product.ProductId,
                    Name = product.Name,
                    Description = product.Description,
                    Price = product.Price,
                    StockQuantity = product.StockQuantity,
                    ImageUrl = product.ImageUrl,
                    CategoryId = product.CategoryId
                };

                // L·∫•y categories ƒë·ªÉ hi·ªÉn th·ªã trong dropdown
                var categories = await _categoryService.GetAllCategoriesAsync();
                ViewBag.Categories = categories;
                
                Console.WriteLine($"‚úÖ [ProductController.Edit GET] L·∫•y {categories.Count} categories th√†nh c√¥ng");
                return View(editModel);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.Edit GET] L·ªói: {ex.Message}");
                TempData["ErrorMessage"] = $"L·ªói khi t·∫£i s·∫£n ph·∫©m: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        /// <summary>
        /// POST: /Admin/Product/Edit/5 - X·ª≠ l√Ω c·∫≠p nh·∫≠t product
        /// </summary>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, ProductEditModel model)
        {
            Console.WriteLine($"üíæ [ProductController.Edit POST] B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t s·∫£n ph·∫©m ID: {id}");
            Console.WriteLine($"üìä [ProductController.Edit POST] Name: {model.Name}, CategoryId: {model.CategoryId}");

            if (id != model.ProductId)
            {
                Console.WriteLine($"‚ö†Ô∏è [ProductController.Edit POST] ID mismatch - URL: {id}, Model: {model.ProductId}");
                return NotFound();
            }

            if (!ModelState.IsValid)
            {
                Console.WriteLine("‚ö†Ô∏è [ProductController.Edit POST] Model validation failed");
                try
                {
                    var categories = await _categoryService.GetAllCategoriesAsync();
                    ViewBag.Categories = categories;
                }
                catch
                {
                    ViewBag.Categories = new List<CategoryViewModel>();
                }
                return View(model);
            }

            try
            {
                Console.WriteLine("üöÄ [ProductController.Edit POST] G·ªçi ProductService.UpdateProductAsync");
                var result = await _productService.UpdateProductAsync(id, model);
                
                Console.WriteLine($"üìä [ProductController.Edit POST] API Response - Success: {result.Success}");
                
                if (result.Success)
                {
                    Console.WriteLine("‚úÖ [ProductController.Edit POST] C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
                    TempData["SuccessMessage"] = result.Message ?? "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!";
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è [ProductController.Edit POST] C·∫≠p nh·∫≠t th·∫•t b·∫°i: {result.Message}");
                    ModelState.AddModelError("", result.Message ?? "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m");
                    
                    var categories = await _categoryService.GetAllCategoriesAsync();
                    ViewBag.Categories = categories;
                    return View(model);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.Edit POST] Exception: {ex.Message}");
                ModelState.AddModelError("", $"L·ªói h·ªá th·ªëng: {ex.Message}");
                
                try
                {
                    var categories = await _categoryService.GetAllCategoriesAsync();
                    ViewBag.Categories = categories;
                }
                catch
                {
                    ViewBag.Categories = new List<CategoryViewModel>();
                }
                return View(model);
            }
        }

        /// <summary>
        /// GET: /Admin/Product/Delete/5 - Hi·ªÉn th·ªã x√°c nh·∫≠n x√≥a
        /// </summary>
        public async Task<IActionResult> Delete(int id)
        {
            Console.WriteLine($"üóëÔ∏è [ProductController.Delete GET] Hi·ªÉn th·ªã form x√≥a s·∫£n ph·∫©m ID: {id}");

            try
            {
                var product = await _productService.GetProductByIdAsync(id);
                if (product == null)
                {
                    Console.WriteLine($"‚ö†Ô∏è [ProductController.Delete GET] Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID: {id}");
                    TempData["ErrorMessage"] = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                    return RedirectToAction(nameof(Index));
                }
                
                Console.WriteLine($"‚úÖ [ProductController.Delete GET] L·∫•y s·∫£n ph·∫©m th√†nh c√¥ng: {product.Name}");
                return View(product);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.Delete GET] L·ªói: {ex.Message}");
                TempData["ErrorMessage"] = $"L·ªói khi t·∫£i s·∫£n ph·∫©m: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        /// <summary>
        /// POST: /Admin/Product/Delete/5 - X·ª≠ l√Ω x√≥a product
        /// </summary>
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            Console.WriteLine($"üóëÔ∏è [ProductController.DeleteConfirmed] B·∫Øt ƒë·∫ßu x√≥a s·∫£n ph·∫©m ID: {id}");

            try
            {
                Console.WriteLine("üöÄ [ProductController.DeleteConfirmed] G·ªçi ProductService.DeleteProductAsync");
                var result = await _productService.DeleteProductAsync(id);
                
                Console.WriteLine($"üìä [ProductController.DeleteConfirmed] API Response - Success: {result.Success}");
                
                if (result.Success)
                {
                    Console.WriteLine("‚úÖ [ProductController.DeleteConfirmed] X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
                    TempData["SuccessMessage"] = result.Message ?? "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!";
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è [ProductController.DeleteConfirmed] X√≥a th·∫•t b·∫°i: {result.Message}");
                    TempData["ErrorMessage"] = result.Message ?? "C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m";
                }
                
                Console.WriteLine("üéØ [ProductController.DeleteConfirmed] Redirect to Index");
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ProductController.DeleteConfirmed] Exception: {ex.Message}");
                TempData["ErrorMessage"] = $"L·ªói h·ªá th·ªëng: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }
    }
}
