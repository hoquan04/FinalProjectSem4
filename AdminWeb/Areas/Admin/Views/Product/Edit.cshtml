@model AdminWeb.Areas.Admin.Models.ProductEditModel
@{
    ViewData["Title"] = "Ch·ªânh s·ª≠a s·∫£n ph·∫©m";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="row">
    <div class="col-lg-8">
        <div class="ibox">
            <div class="ibox-title">
                <h5>@ViewData["Title"]: @Model.Name</h5>
                <div class="ibox-tools">
                    <a asp-action="Index" class="btn btn-sm btn-secondary">
                        <i class="fa fa-arrow-left"></i> Quay l·∫°i danh s√°ch
                    </a>
                </div>
            </div>
            <div class="ibox-content">
                
                @* Form ƒë·ªÉ PUT API *@
                <form asp-action="Edit" method="post" enctype="multipart/form-data" class="form-horizontal">
                    <input asp-for="ProductId" type="hidden" />
                    <input asp-for="ImageUrl" type="hidden" />
                    @Html.AntiForgeryToken()
                    
                    @* Validation summary - hi·ªÉn th·ªã l·ªói chung *@
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    
                    @* Tr∆∞·ªùng T√™n s·∫£n ph·∫©m *@
                    <div class="form-group">
                        <label asp-for="Name" class="col-sm-2 control-label"></label>
                        <div class="col-sm-10">
                            <input asp-for="Name" class="form-control" 
                                   placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m (v√≠ d·ª•: iPhone 15, MacBook Pro...)">
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                    </div>

                    @* Tr∆∞·ªùng Danh m·ª•c *@
                    <div class="form-group">
                        <label asp-for="CategoryId" class="col-sm-2 control-label"></label>
                        <div class="col-sm-10">
                            <select asp-for="CategoryId" class="form-control">
                                <option value="">-- Ch·ªçn danh m·ª•c --</option>
                                @if (ViewBag.Categories != null)
                                {
                                    foreach (var category in (List<AdminWeb.Areas.Admin.Models.CategoryViewModel>)ViewBag.Categories)
                                    {
                                        var isSelected = Model.CategoryId == category.CategoryId;
                                        <option value="@category.CategoryId" selected="@isSelected">
                                            @category.Name
                                        </option>
                                    }
                                }
                            </select>
                            <span asp-validation-for="CategoryId" class="text-danger"></span>
                        </div>
                    </div>

                    @* Tr∆∞·ªùng M√¥ t·∫£ *@
                    <div class="form-group">
                        <label asp-for="Description" class="col-sm-2 control-label"></label>
                        <div class="col-sm-10">
                            <textarea asp-for="Description" class="form-control" rows="4" 
                                      placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m (kh√¥ng b·∫Øt bu·ªôc)"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                    </div>

                    @* Tr∆∞·ªùng Gi√° *@
                    <div class="form-group">
                        <label asp-for="Price" class="col-sm-2 control-label"></label>
                        <div class="col-sm-10">
                            <div class="input-group">
                                <input asp-for="Price" class="form-control" type="number" step="0.01" min="0">
                                <span class="input-group-addon">VNƒê</span>
                            </div>
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>
                    </div>

                    @* Tr∆∞·ªùng S·ªë l∆∞·ª£ng t·ªìn kho *@
                    <div class="form-group">
                        <label asp-for="StockQuantity" class="col-sm-2 control-label"></label>
                        <div class="col-sm-10">
                            <input asp-for="StockQuantity" class="form-control" type="number" min="0">
                            <span asp-validation-for="StockQuantity" class="text-danger"></span>
                        </div>
                    </div>

                    @* Tr∆∞·ªùng Upload H√¨nh ·∫£nh m·ªõi *@
                    <div class="form-group">
                        <label asp-for="ImageFile" class="col-sm-2 control-label"></label>
                        <div class="col-sm-10">
                            <div class="custom-file">
                                <input asp-for="ImageFile" type="file" class="custom-file-input" id="imageFileInput" accept="image/*">
                                <label class="custom-file-label" for="imageFileInput">Ch·ªçn file ·∫£nh m·ªõi (t√πy ch·ªçn)...</label>
                            </div>
                            <small class="text-muted">Ch·∫•p nh·∫≠n file: JPG, JPEG, PNG, GIF, WEBP (t·ªëi ƒëa 5MB). ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën thay ƒë·ªïi.</small>
                            <span asp-validation-for="ImageFile" class="text-danger"></span>
                            
                            @* Progress bar cho upload *@
                            <div id="uploadProgress" class="progress mt-2" style="display: none;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>

                    <div class="hr-line-dashed"></div>
                    
                    @* Buttons *@
                    <div class="form-group">
                        <div class="col-sm-4 col-sm-offset-2">
                            <button type="submit" class="btn btn-primary" id="btnSubmit">
                                <i class="fa fa-save"></i> C·∫≠p nh·∫≠t s·∫£n ph·∫©m
                            </button>
                            <a asp-action="Index" class="btn btn-default">
                                <i class="fa fa-times"></i> H·ªßy
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
       
        @* Preview image *@
        <div class="ibox">
            <div class="ibox-title">
                <h5>H√¨nh ·∫£nh s·∫£n ph·∫©m</h5>
            </div>
            <div class="ibox-content"
                 style="min-height: 250px; display: flex; align-items: center; justify-content: center;">

                <div class="text-center">
                    <img id="imagePreview" 
                         src="@(!string.IsNullOrEmpty(Model.ImageUrl) ? (Model.ImageUrl.StartsWith("http") ? Model.ImageUrl : $"{AdminWeb.Areas.Admin.Data.ApiConstants.BaseUrl.Replace("/api/", "")}{Model.ImageUrl}") : "#")" 
                         alt="Preview" 
                         style="max-width: 100%; max-height: 200px; @(string.IsNullOrEmpty(Model.ImageUrl) ? "display: none;" : "") border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" 
                         class="img-responsive">
                    <div id="noImageText" class="text-muted" style="@(!string.IsNullOrEmpty(Model.ImageUrl) ? "display: none;" : "")">
                        <i class="fa fa-image fa-4x mb-3" style="color: #ddd;"></i>
                        <p class="h6">Ch∆∞a c√≥ h√¨nh ·∫£nh</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        console.log('üîß Product Edit script loaded');
        
        const API_BASE = '@AdminWeb.Areas.Admin.Data.ApiConstants.BaseUrl';
        const UPLOAD_API = '@AdminWeb.Areas.Admin.Data.ApiConstants.FileUploadApi';
        
        // Handle file input change
        $('#imageFileInput').on('change', function(e) {
            const file = e.target.files[0];
            const preview = $('#imagePreview');
            const noImageText = $('#noImageText');
            const progressBar = $('#uploadProgress');
            const fileLabel = $('.custom-file-label');
            
            if (file) {
                // Update label
                fileLabel.text(file.name);
                
                // Validate file
                const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, JPEG, PNG, GIF, WEBP)');
                    this.value = '';
                    fileLabel.text('Ch·ªçn file ·∫£nh m·ªõi (t√πy ch·ªçn)...');
                    return;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    alert('File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB');
                    this.value = '';
                    fileLabel.text('Ch·ªçn file ·∫£nh m·ªõi (t√πy ch·ªçn)...');
                    return;
                }
                
                // Show preview immediately
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.attr('src', e.target.result).show();
                    noImageText.hide();
                };
                reader.readAsDataURL(file);
                
                // Upload file to server
                uploadFile(file, progressBar);
            } else {
                fileLabel.text('Ch·ªçn file ·∫£nh m·ªõi (t√πy ch·ªçn)...');
            }
        });
        
        // Upload file function
        function uploadFile(file, progressBar) {
            const formData = new FormData();
            formData.append('file', file);
            
            progressBar.show();
            
            $.ajax({
                url: UPLOAD_API,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                xhr: function() {
                    const xhr = new window.XMLHttpRequest();
                    xhr.upload.addEventListener("progress", function(evt) {
                        if (evt.lengthComputable) {
                            const percentComplete = (evt.loaded / evt.total) * 100;
                            progressBar.find('.progress-bar').css('width', percentComplete + '%');
                        }
                    }, false);
                    return xhr;
                },
                success: function(response) {
                    console.log('‚úÖ File uploaded successfully:', response);
                    if (response.success && response.data) {
                        $('#ImageUrl').val(response.data);
                        console.log('üìÅ ImageUrl set to:', response.data);
                    }
                    progressBar.hide();
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå Upload failed:', error);
                    alert('Upload th·∫•t b·∫°i: ' + (xhr.responseJSON?.message || error));
                    progressBar.hide();
                }
            });
        }
        
        // JavaScript ƒë·ªÉ show loading khi submit
        $('#btnSubmit').click(function(e) {
            e.preventDefault();
            
            console.log('üñ±Ô∏è Edit button clicked');
            console.log('üéØ ProductId:', @Model.ProductId);
            
            var $btn = $(this);
            var $form = $btn.closest('form');
            
            // Ki·ªÉm tra validation tr∆∞·ªõc khi submit
            if (!$form.valid()) {
                console.log('‚ùå Form validation failed');
                return false;
            }
            
            console.log('‚úÖ Form validation passed');
            console.log('üöÄ Submitting form to:', $form.attr('action'));
            
            // Show loading state
            $btn.prop('disabled', true)
                .html('<i class="fa fa-spinner fa-spin"></i> ƒêang c·∫≠p nh·∫≠t...');
            
            // Submit form manually
            $form.submit();
        });
        
        // Reset button n·∫øu c√≥ l·ªói validation
        $('form').on('invalid-form.validate', function() {
            console.log('‚ùå Form validation failed - resetting button');
            $('#btnSubmit').prop('disabled', false)
                          .html('<i class="fa fa-save"></i> C·∫≠p nh·∫≠t s·∫£n ph·∫©m');
        });
        
        // Th√™m timeout ƒë·ªÉ reset button n·∫øu qu√° l√¢u
        var submitTimeout;
        $('form').on('submit', function() {
            submitTimeout = setTimeout(function() {
                $('#btnSubmit').prop('disabled', false)
                              .html('<i class="fa fa-save"></i> C·∫≠p nh·∫≠t s·∫£n ph·∫©m');
                alert('Thao t√°c m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi API v√† th·ª≠ l·∫°i.');
            }, 30000);
        });
        
        // Clear timeout khi page unload
        $(window).on('beforeunload', function() {
            if (submitTimeout) {
                clearTimeout(submitTimeout);
            }
        });
    </script>
}
