@model List<AdminWeb.Areas.Admin.Models.Payment>
@using AdminWeb.Areas.Admin.Models

@{
	ViewData["Title"] = "Danh s√°ch thanh to√°n";
	Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
	int stt = 1;

	// L·∫•y tr·∫°ng th√°i ƒë√£ ch·ªçn t·ª´ ViewBag
	PaymentStatus? selectedStatus = ViewBag.Status as PaymentStatus?;

	// T·∫°o HTML cho <option>
	var optionsHtml = new System.Text.StringBuilder();
	foreach (PaymentStatus s in Enum.GetValues(typeof(PaymentStatus)))
	{
		var text = s switch
		{
			PaymentStatus.Pending => "ƒêang ch·ªù",
			PaymentStatus.Paid => "ƒê√£ thanh to√°n",
			PaymentStatus.Failed => "Th·∫•t b·∫°i",
			_ => s.ToString()
		};
		var selectedAttr = (selectedStatus.HasValue && selectedStatus.Value == s) ? " selected" : "";
		optionsHtml.Append($"<option value='{s}'{selectedAttr}>{text}</option>");
	}
}

<div class="col-lg-12">
    <div class="ibox-content">

        @* üîî Success/Error Messages *@
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissable">
                <button aria-hidden="true" data-dismiss="alert" class="close" type="button">√ó</button>
                <i class="fa fa-check"></i> @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissable">
                <button aria-hidden="true" data-dismiss="alert" class="close" type="button">√ó</button>
                <i class="fa fa-times"></i> @TempData["ErrorMessage"]
            </div>
        }

        <div class="row mb-3">
    <form asp-action="Index" method="get" class="form-inline w-100">
				<div class="col-sm-3">
					<input type="text" name="paymentId"
						   value="@(ViewBag.PaymentId ?? "")"
						   placeholder="T√¨m ki·∫øm theo m√£ thanh to√°n..."
						   class="input-sm form-control w-100" />
				</div>

				<div class="col-sm-3">
					<select name="status" class="form-control input-sm w-100">
						<option value="">-- T·∫•t c·∫£ tr·∫°ng th√°i --</option>
						@foreach (PaymentStatus s in Enum.GetValues(typeof(PaymentStatus)))
						{
							var text = s switch
							{
								PaymentStatus.Pending => "ƒêang ch·ªù",
								PaymentStatus.Paid => "ƒê√£ thanh to√°n",
								PaymentStatus.Failed => "Th·∫•t b·∫°i",
								_ => s.ToString()
							};

							// N·∫øu status ƒëang ƒë∆∞·ª£c ch·ªçn ‚Üí selected
							if (ViewBag.Status != null && (PaymentStatus)ViewBag.Status == s)
							{
								<option value="@s" selected>@text</option>
							}
							else
							{
								<option value="@s">@text</option>
							}
						}
					</select>
				</div>

        <div class="col-sm-6 text-right">
            <button type="submit" class="btn btn-sm btn-primary">
                <i class="fa fa-search"></i> T√¨m ki·∫øm
            </button>
            @* <a asp-action="Create" class="btn btn-sm btn-success">
                <i class="fa fa-plus"></i> Th√™m m·ªõi
            </a> *@
					@if (ViewBag.OrderId != null || ViewBag.Status != null)
					{
						<a asp-action="Index" class="btn btn-secondary">
							<i class="fa fa-list"></i> Xem t·∫•t c·∫£
						</a>
					}
        </div>
    </form>
</div>

        @* B·∫£ng hi·ªÉn th·ªã d·ªØ li·ªáu *@
        <div class="table-responsive mt-3">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>M√£ thanh to√°n</th>
                        <th>M√£ ƒë∆°n h√†ng</th>
                        <th>Ph∆∞∆°ng th·ª©c</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Ng√†y t·∫°o</th>
                        <th>Ng√†y thanh to√°n</th>
                        @* <th>Thao t√°c</th> *@
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@(stt++)</td>
                                <td>@item.PaymentId</td>
                                <td>@item.OrderId</td>
                                <td>@item.PaymentMethod</td>
								<td>
									@switch (item.PaymentStatus)
									{
										case PaymentStatus.Paid:
											<span class="badge badge-success">ƒê√£ thanh to√°n</span>
											break;
										case PaymentStatus.Pending:
											<span class="badge badge-warning">ƒêang ch·ªù</span>
											break;
										case PaymentStatus.Failed:
											<span class="badge badge-danger">Th·∫•t b·∫°i</span>
											break;
									}
								</td>
                                <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>@(item.PaidAt.HasValue ? item.PaidAt.Value.ToString("dd/MM/yyyy HH:mm") : "-")</td>
                                @* <td>
                                    <a asp-action="Edit" asp-route-id="@item.PaymentId" class="btn btn-sm btn-warning">S·ª≠a</a>
                                    <a asp-action="Delete" asp-route-id="@item.PaymentId" class="btn btn-sm btn-danger" onclick="return confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a thanh to√°n n√†y?');">X√≥a</a>
                                </td> *@
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">Kh√¥ng c√≥ thanh to√°n n√†o.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
