using Microsoft.AspNetCore.Mvc;
using API.Repositories.RestAPI;

namespace API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FileController : ControllerBase
    {
        private readonly IWebHostEnvironment _environment;

        public FileController(IWebHostEnvironment environment)
        {
            _environment = environment;
        }

        [HttpPost("upload")]
        public async Task<IActionResult> UploadFile(IFormFile file)
        {
            var response = new APIRespone<string>();

            try
            {
                if (file == null || file.Length == 0)
                {
                    response.Success = false;
                    response.Message = "Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n";
                    return BadRequest(response);
                }

                // Ki·ªÉm tra lo·∫°i file
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
                var fileExtension = Path.GetExtension(file.FileName).ToLowerInvariant();
                
                if (!allowedExtensions.Contains(fileExtension))
                {
                    response.Success = false;
                    response.Message = "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpg, jpeg, png, gif, webp)";
                    return BadRequest(response);
                }

                // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 5MB)
                if (file.Length > 5 * 1024 * 1024)
                {
                    response.Success = false;
                    response.Message = "File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB";
                    return BadRequest(response);
                }

                // T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a c√≥
                var uploadsPath = Path.Combine(_environment.WebRootPath, "uploads", "products");
                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                // T·∫°o t√™n file unique
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var filePath = Path.Combine(uploadsPath, fileName);

                // L∆∞u file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }

                // Tr·∫£ v·ªÅ URL c·ªßa file
                var fileUrl = $"/uploads/products/{fileName}";
                
                response.Success = true;
                response.Message = "Upload file th√†nh c√¥ng";
                response.Data = fileUrl;

                return Ok(response);
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi upload file: {ex.Message}";
                return StatusCode(500, response);
            }
        }

        [HttpDelete("delete")]
        public IActionResult DeleteFile([FromQuery] string fileName, [FromQuery] string folder = "products")
        {
            var response = new APIRespone<bool>();

            try
            {
                if (string.IsNullOrEmpty(fileName))
                {
                    response.Success = false;
                    response.Message = "T√™n file kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
                    return BadRequest(response);
                }

                var safeFileName = Path.GetFileName(fileName);
                var uploadsFolder = folder == "cccd" ? "cccd" : "products";
                var filePath = Path.Combine(_environment.WebRootPath, "uploads", uploadsFolder, safeFileName);

                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                    response.Success = true;
                    response.Message = "X√≥a file th√†nh c√¥ng";
                    response.Data = true;
                }
                else
                {
                    response.Success = false;
                    response.Message = "File kh√¥ng t·ªìn t·∫°i";
                    response.Data = false;
                }

                return Ok(response);
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi x√≥a file: {ex.Message}";
                response.Data = false;
                return StatusCode(500, response);
            }
        }


        [HttpPost("upload-cccd")]
        public async Task<IActionResult> UploadCCCD(IFormFile file)
        {
            var response = new APIRespone<string>();

            try
            {
                if (file == null || file.Length == 0)
                {
                    response.Success = false;
                    response.Message = "Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n";
                    return BadRequest(response);
                }

                // Ki·ªÉm tra lo·∫°i file
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
                var fileExtension = Path.GetExtension(file.FileName).ToLowerInvariant();

                if (!allowedExtensions.Contains(fileExtension))
                {
                    response.Success = false;
                    response.Message = "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpg, jpeg, png, gif, webp)";
                    return BadRequest(response);
                }

                // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 5MB)
                if (file.Length > 5 * 1024 * 1024)
                {
                    response.Success = false;
                    response.Message = "File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB";
                    return BadRequest(response);
                }

                // üìÅ L∆∞u ri√™ng th∆∞ m·ª•c /uploads/cccd/
                var uploadsPath = Path.Combine(_environment.WebRootPath, "uploads", "cccd");
                if (!Directory.Exists(uploadsPath))
                    Directory.CreateDirectory(uploadsPath);

                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var filePath = Path.Combine(uploadsPath, fileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }

                // Tr·∫£ v·ªÅ URL c√¥ng khai
                var fileUrl = $"/uploads/cccd/{fileName}";

                response.Success = true;
                response.Message = "Upload ·∫£nh CCCD th√†nh c√¥ng";
                response.Data = fileUrl;

                return Ok(response);
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi upload ·∫£nh CCCD: {ex.Message}";
                return StatusCode(500, response);
            }
        }

    }
}
