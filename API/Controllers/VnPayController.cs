//using API.Data;
//using API.Models;
//using API.Repositories.IRepositories;
//using API.Repositories.Services;
//using Microsoft.AspNetCore.Mvc;
//using Microsoft.EntityFrameworkCore;

//namespace API.Controllers
//{
//    [Route("api/[controller]")]
//    [ApiController]
//    public class VnPayController : ControllerBase
//    {
//        private readonly IVnPayService _vnPayService;
//        private readonly DataContext _context;
//        private readonly IEmailSender _emailSender;
//        private readonly INotificationRepository _notificationRepo;

//        public VnPayController(
//            IVnPayService vnPayService,
//            DataContext context,
//            IEmailSender emailSender,
//            INotificationRepository notificationRepo)
//        {
//            _vnPayService = vnPayService;
//            _context = context;
//            _emailSender = emailSender;
//            _notificationRepo = notificationRepo;
//        }

//[HttpGet("callback")]
//public async Task<IActionResult> Callback(
//    [FromQuery] int userId,
//    [FromQuery] double total,
//    [FromQuery] string recipientName,
//    [FromQuery] string phone,
//    [FromQuery] string email,
//    [FromQuery] string address)
//{
//    var response = _vnPayService.PaymentExecute(Request.Query);

//    // ‚ùå N·∫øu ng∆∞·ªùi d√πng h·ªßy thanh to√°n ho·∫∑c l·ªói
//    if (response.VnPayResponseCode != "00")
//        return Ok(new { success = false, message = "Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy." });

//    // ‚úÖ N·∫øu thanh to√°n th√†nh c√¥ng
//    using var transaction = await _context.Database.BeginTransactionAsync();
//    try
//    {
//        // 1Ô∏è‚É£ L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè c·ªßa user
//        var cartItems = await _context.Carts
//            .Include(c => c.Product)
//            .Where(c => c.UserId == userId)
//            .ToListAsync();

//        if (!cartItems.Any())
//            return BadRequest(new { success = false, message = "Gi·ªè h√†ng tr·ªëng." });

//        // 2Ô∏è‚É£ T·∫°o Shipping
//        var shipping = new Shipping
//        {
//            RecipientName = recipientName,
//            PhoneNumber = phone,
//            Email = email,
//            Address = address
//        };
//        _context.Shippings.Add(shipping);
//        await _context.SaveChangesAsync();

//        // 3Ô∏è‚É£ T·∫°o Order
//        var order = new Order
//        {
//            UserId = userId,
//            ShippingId = shipping.ShippingId,
//            Status = OrderStatus.Pending, // ‚úÖ v·∫´n ·ªü tr·∫°ng th√°i "ƒëang x·ª≠ l√Ω"
//            TotalAmount = (decimal)total
//        };
//        _context.Orders.Add(order);
//        await _context.SaveChangesAsync();

//        // 4Ô∏è‚É£ Th√™m chi ti·∫øt s·∫£n ph·∫©m
//        foreach (var item in cartItems)
//        {
//            _context.OrderDetails.Add(new OrderDetail
//            {
//                OrderId = order.OrderId,
//                ProductId = item.ProductId,
//                Quantity = item.Quantity,
//                UnitPrice = item.Product.Price,
//                SubTotal = item.Product.Price * item.Quantity
//            });
//        }
//        await _context.SaveChangesAsync();

//        // 5Ô∏è‚É£ Th√™m th√¥ng tin thanh to√°n
//        _context.Payments.Add(new Payment
//        {
//            OrderId = order.OrderId,
//            PaymentMethod = PaymentMethod.VNPay,
//            PaymentStatus = PaymentStatus.Paid,
//            PaidAt = DateTime.Now
//        });
//        await _context.SaveChangesAsync();

//        // 6Ô∏è‚É£ X√≥a gi·ªè h√†ng
//        _context.Carts.RemoveRange(cartItems);
//        await _context.SaveChangesAsync();

//        await transaction.CommitAsync();

//        // üîî G·ª≠i th√¥ng b√°o
//        await _notificationRepo.AddAsync(new Notification
//        {
//            UserId = order.UserId,
//            OrderId = order.OrderId,
//            Title = "Thanh to√°n VNPay th√†nh c√¥ng",
//            Message = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng.",
//            Type = NotificationType.Payment,
//            CreatedAt = DateTime.UtcNow
//        });

//        // üìß G·ª≠i email
//        if (!string.IsNullOrEmpty(email))
//        {
//            await _emailSender.SendEmailAsync(
//                email,
//                $"Thanh to√°n ƒë∆°n h√†ng #{order.OrderId} th√†nh c√¥ng",
//                $"<p>B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng ƒë∆°n h√†ng #{order.OrderId} qua VNPay.</p>"
//            );
//        }

//        // ‚úÖ Tr·∫£ k·∫øt qu·∫£ cho Flutter
//        return Ok(new { success = true, message = "Thanh to√°n th√†nh c√¥ng", orderId = order.OrderId });
//    }
//    catch (Exception ex)
//    {
//        await transaction.RollbackAsync();
//        return BadRequest(new { success = false, message = ex.Message });
//    }
//}
//        }
//}

using API.Data;
using API.Models;
using API.Repositories.IRepositories;
using API.Repositories.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VnPayController : ControllerBase
    {
        private readonly IVnPayService _vnPayService;
        private readonly DataContext _context;
        private readonly IEmailSender _emailSender;
        private readonly INotificationRepository _notificationRepo;

        public VnPayController(
            IVnPayService vnPayService,
            DataContext context,
            IEmailSender emailSender,
            INotificationRepository notificationRepo)
        {
            _vnPayService = vnPayService;
            _context = context;
            _emailSender = emailSender;
            _notificationRepo = notificationRepo;
        }

        [HttpGet("callback")]
        public async Task<IActionResult> Callback(
            [FromQuery] int userId,
            [FromQuery] string cartIds,
            [FromQuery] double total,
            [FromQuery] string recipientName,
            [FromQuery] string phone,
            [FromQuery] string email,
            [FromQuery] string address)
        {
            var response = _vnPayService.PaymentExecute(Request.Query);

            // ‚ùå N·∫øu thanh to√°n th·∫•t b·∫°i
            if (response == null || response.VnPayResponseCode != "00")
            {
                return Ok(new
                {
                    success = false,
                    message = "Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy."
                });
            }

            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // üîπ L·∫•y danh s√°ch cart
                if (string.IsNullOrEmpty(cartIds))
                    return BadRequest(new { success = false, message = "Thi·∫øu danh s√°ch gi·ªè h√†ng c·∫ßn thanh to√°n." });

                var selectedIds = cartIds.Split(',').Select(int.Parse).ToList();

                var cartItems = await _context.Carts
                    .Include(c => c.Product)
                    .Where(c => c.UserId == userId && selectedIds.Contains(c.CartId))
                    .ToListAsync();

                if (!cartItems.Any())
                    return BadRequest(new { success = false, message = "Gi·ªè h√†ng tr·ªëng." });

                // 1Ô∏è‚É£ Shipping
                var shipping = new Shipping
                {
                    RecipientName = recipientName,
                    PhoneNumber = phone,
                    Email = email,
                    Address = address
                };
                _context.Shippings.Add(shipping);
                await _context.SaveChangesAsync();

                // 2Ô∏è‚É£ Order
                var order = new Order
                {
                    UserId = userId,
                    ShippingId = shipping.ShippingId,
                    Status = OrderStatus.Pending,
                    TotalAmount = (decimal)total
                };
                _context.Orders.Add(order);
                await _context.SaveChangesAsync();

                // 3Ô∏è‚É£ Order Details
                foreach (var item in cartItems)
                {
                    _context.OrderDetails.Add(new OrderDetail
                    {
                        OrderId = order.OrderId,
                        ProductId = item.ProductId,
                        Quantity = item.Quantity,
                        UnitPrice = item.Product.Price,
                        SubTotal = item.Product.Price * item.Quantity
                    });
                }
                await _context.SaveChangesAsync();

                // 4Ô∏è‚É£ Payment
                _context.Payments.Add(new Payment
                {
                    OrderId = order.OrderId,
                    PaymentMethod = PaymentMethod.VNPay,
                    PaymentStatus = PaymentStatus.Paid,
                    PaidAt = DateTime.Now
                });
                await _context.SaveChangesAsync();

                // 5Ô∏è‚É£ X√≥a gi·ªè h√†ng
                _context.Carts.RemoveRange(cartItems);
                await _context.SaveChangesAsync();

                await transaction.CommitAsync();

                // 6Ô∏è‚É£ Th√¥ng b√°o
                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = order.UserId,
                    OrderId = order.OrderId,
                    Title = "ƒê∆°n h√†ng m·ªõi",
                    Message = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v√† ƒëang ch·ªù x·ª≠ l√Ω.",
                    Type = NotificationType.Order,
                    CreatedAt = DateTime.UtcNow,
                    IsRead = false
                });

                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = order.UserId,
                    OrderId = order.OrderId,
                    Title = "Thanh to√°n VNPay th√†nh c√¥ng",
                    Message = $"B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng #{order.OrderId} qua VNPay.",
                    Type = NotificationType.Payment,
                    CreatedAt = DateTime.UtcNow,
                    IsRead = false
                });

                // 7Ô∏è‚É£ üìß G·ª≠i email x√°c nh·∫≠n (gi·ªëng COD)
                if (!string.IsNullOrEmpty(email))
                {
                    await _emailSender.SendEmailAsync(
                        email,
                        $"X√°c nh·∫≠n ƒë∆°n h√†ng #{order.OrderId}",
                        $@"
                        <p>Xin ch√†o {recipientName},</p>
                        <p>B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng ƒë∆°n h√†ng <strong>#{order.OrderId}</strong> qua VNPay.</p>
                        <p>Ph∆∞∆°ng th·ª©c thanh to√°n: <strong>VNPay (ƒê√£ thanh to√°n)</strong>.</p>
                        <p>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v√† giao h√†ng trong th·ªùi gian s·ªõm nh·∫•t.</p>
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i ‚ù§Ô∏è</p>
                        "
                    );
                }

                // ‚úÖ Tr·∫£ v·ªÅ Flutter
                return Ok(new
                {
                    success = true,
                    message = "Thanh to√°n VNPay th√†nh c√¥ng",
                    orderId = order.OrderId
                });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return BadRequest(new
                {
                    success = false,
                    message = $"L·ªói x·ª≠ l√Ω callback: {ex.Message}"
                });
            }
        }
    }
}
