using API.Data;
using API.Models;
using API.Models.DTOs;
using API.Repositories.IRepositories;
using API.Repositories.RestAPI;
using API.Repositories.Services;
using Microsoft.EntityFrameworkCore;

namespace API.Repositories
{
    public class CheckoutRepository
    {
        private readonly DataContext _context;
        private readonly IConfiguration _config;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IEmailSender _emailSender;
        private readonly IVnPayService _vnPayService;
        private readonly INotificationRepository _notificationRepo;

        public CheckoutRepository(
            DataContext context,
            IConfiguration config,
            IHttpContextAccessor httpContextAccessor,
            IEmailSender emailSender,
            IVnPayService vnPayService,
            INotificationRepository notificationRepo) // üëà th√™m v√†o ƒë√¢y
        {
            _context = context;
            _config = config;
            _httpContextAccessor = httpContextAccessor;
            _emailSender = emailSender;
            _vnPayService = vnPayService;
            _notificationRepo = notificationRepo; // üëà g√°n v√†o bi·∫øn
        }


        public async Task<APIRespone<object>> CheckoutAsync(CheckoutRequestDto dto)
        {
            // üõí L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè
            var cartItems = await _context.Carts
                .Include(c => c.Product)
                .Where(c => c.UserId == dto.UserId && dto.CartIds.Contains(c.CartId))
                .ToListAsync();

            if (!cartItems.Any())
                return new APIRespone<object> { Success = false, Message = "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn" };

            // üî¢ T√≠nh t·ªïng ti·ªÅn
            var totalAmount = cartItems.Sum(i => i.Product.Price * i.Quantity);

            // üîπ N·∫øu l√† COD ‚Üí L∆∞u lu√¥n
            if (dto.PaymentMethod == PaymentMethod.CashOnDelivery)
            {
                using var transaction = await _context.Database.BeginTransactionAsync();
                try
                {
                    var shipping = new Shipping
                    {
                        RecipientName = dto.RecipientName,
                        PhoneNumber = dto.PhoneNumber,
                        Email = dto.Email,
                        Address = dto.Address,
                        City = dto.City,
                        PostalCode = dto.PostalCode
                    };
                    _context.Shippings.Add(shipping);
                    await _context.SaveChangesAsync();

                    var order = new Order
                    {
                        UserId = dto.UserId,
                        ShippingId = shipping.ShippingId,
                        Status = OrderStatus.Pending,
                        TotalAmount = totalAmount
                    };
                    _context.Orders.Add(order);
                    await _context.SaveChangesAsync();

                    foreach (var item in cartItems)
                    {
                        _context.OrderDetails.Add(new OrderDetail
                        {
                            OrderId = order.OrderId,
                            ProductId = item.ProductId,
                            Quantity = item.Quantity,
                            UnitPrice = item.Product.Price,
                            SubTotal = item.Product.Price * item.Quantity
                        });
                    }
                    await _context.SaveChangesAsync();

                    _context.Payments.Add(new Payment
                    {
                        OrderId = order.OrderId,
                        PaymentMethod = PaymentMethod.CashOnDelivery,
                        PaymentStatus = PaymentStatus.Pending
                    });
                    await _context.SaveChangesAsync();

                    _context.Carts.RemoveRange(cartItems);
                    await _context.SaveChangesAsync();

                    await transaction.CommitAsync();

                    // üîî T·∫°o th√¥ng b√°o cho COD
                    await _notificationRepo.AddAsync(new Notification
                    {
                        UserId = order.UserId,
                        OrderId = order.OrderId,
                        Title = "ƒê∆°n h√†ng m·ªõi",
                        Message = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v√† ƒëang ch·ªù x·ª≠ l√Ω.",
                        Type = NotificationType.Order,
                        CreatedAt = DateTime.UtcNow,
                        IsRead = false
                    });

                    await _notificationRepo.AddAsync(new Notification
                    {
                        UserId = order.UserId,
                        OrderId = order.OrderId,
                        Title = "Thanh to√°n khi nh·∫≠n h√†ng",
                        Message = $"B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng cho ƒë∆°n #{order.OrderId}.",
                        Type = NotificationType.Payment,
                        CreatedAt = DateTime.UtcNow,
                        IsRead = false
                    });

                    // üìß G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng COD
                    if (!string.IsNullOrEmpty(dto.Email))
                    {
                        await _emailSender.SendEmailAsync(
                            dto.Email,
                            $"X√°c nh·∫≠n ƒë∆°n h√†ng #{order.OrderId}",
                            $@"
            <p>Xin ch√†o {dto.RecipientName},</p>
            <p>B·∫°n ƒë√£ ƒë·∫∑t ƒë∆°n h√†ng <strong>#{order.OrderId}</strong> th√†nh c√¥ng.</p>
            <p>Ph∆∞∆°ng th·ª©c thanh to√°n: <strong>Ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng (COD)</strong>.</p>
            <p>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v√† giao h√†ng trong th·ªùi gian s·ªõm nh·∫•t.</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i ‚ù§Ô∏è</p>
        "
                        );
                    }
                    return new APIRespone<object>
                    {
                        Success = true,
                        Message = "ƒê·∫∑t h√†ng th√†nh c√¥ng (COD)",
                        Data = order
                    };

                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    return new APIRespone<object> { Success = false, Message = ex.Message };
                }
            }

            // üîπ N·∫øu l√† VNPay ‚Üí KH√îNG L∆ØU DB, ch·ªâ t·∫°o URL thanh to√°n
            if (dto.PaymentMethod == PaymentMethod.VNPay)
            {
                var total = (double)totalAmount;
                var vnRequest = new VnPaymentRequestModel
                {
                    OrderId = (int)(DateTime.Now.Ticks % int.MaxValue),
                    FullName = dto.RecipientName,
                    Amount = total,
                    Description = $"Thanh to√°n ƒë∆°n h√†ng cho user {dto.UserId}",
                    CreatedDate = DateTime.Now
                };

                // ‚úÖ G·ª≠i t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt cho callback
                // üîπ G·ª≠i th√™m danh s√°ch CartIds qua URL ƒë·ªÉ callback ch·ªâ x·ª≠ l√Ω s·∫£n ph·∫©m ƒë√£ ch·ªçn
                var cartIds = string.Join(",", dto.CartIds); // v√≠ d·ª•: "5,7,10"
                var queryString = $"userId={dto.UserId}&cartIds={cartIds}&total={total}&recipientName={dto.RecipientName}&phone={dto.PhoneNumber}&email={dto.Email}&address={dto.Address}";

                var returnUrl = $"{_config["Vnpay:PaymentBackReturnUrl"]}?{queryString}";
                var paymentUrl = _vnPayService.CreatePaymentUrl(_httpContextAccessor.HttpContext!, vnRequest, returnUrl);

                return new APIRespone<object>
                {
                    Success = true,
                    Message = "Chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPay ƒë·ªÉ thanh to√°n",
                    Data = new { PaymentUrl = paymentUrl }
                };
            }

            return new APIRespone<object> { Success = false, Message = "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá" };
        }

    }
}
