using API.Data;
using API.Models;
using API.Models.DTOs;
using API.Repositories.IRepositories;
using API.Repositories.RestAPI;
using Microsoft.EntityFrameworkCore;

namespace API.Repositories
{
    public class OrderRepository : IOrderRepository
    {
        private readonly DataContext _context;
        private readonly IEmailSender _emailSender;
        private readonly INotificationRepository _notificationRepo;

        public OrderRepository(DataContext context, IEmailSender emailSender, INotificationRepository notificationRepo)
        {
            _context = context;
            _emailSender = emailSender;
            _notificationRepo = notificationRepo;
        }


        public async Task<APIRespone<Order>> AddAsync(Order entity)
        {
            _context.Orders.Add(entity);
            await _context.SaveChangesAsync();

            // üÜï G·ª≠i th√¥ng b√°o trong h·ªá th·ªëng
            await _notificationRepo.AddAsync(new Notification
            {
                UserId = entity.UserId,
                OrderId = entity.OrderId,
                Title = "ƒê·∫∑t h√†ng th√†nh c√¥ng",
                Message = $"C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng #{entity.OrderId}. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng s·ªõm nh·∫•t!",
                Type = NotificationType.Order,
                IsRead = false,
                CreatedAt = DateTime.UtcNow
            });

            // üìß G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t h√†ng
            try
            {
                // L·∫•y th√¥ng tin ng∆∞·ªùi nh·∫≠n email
                var shipping = await _context.Shippings.FirstOrDefaultAsync(s => s.ShippingId == entity.ShippingId);
                var user = await _context.Users.FirstOrDefaultAsync(u => u.UserId == entity.UserId);

                var emailTo = shipping?.Email ?? user?.Email;

                if (!string.IsNullOrEmpty(emailTo))
                {
                    string subject = $"X√°c nh·∫≠n ƒë∆°n h√†ng #{entity.OrderId}";
                    string message = $@"
                <h3>Xin ch√†o {(shipping?.RecipientName ?? user?.FullName) ?? "Qu√Ω kh√°ch"},</h3>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!</p>
                <p><b>M√£ ƒë∆°n h√†ng:</b> #{entity.OrderId}</p>
                <p><b>Ng√†y ƒë·∫∑t:</b> {entity.OrderDate:dd/MM/yyyy HH:mm}</p>
                <p><b>T·ªïng ti·ªÅn:</b> {entity.TotalAmount:N0} ƒë</p>
                <p><b>Tr·∫°ng th√°i:</b> {entity.Status}</p>
                <br/>
                <p>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá s·ªõm ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng cho b·∫°n.</p>
                <p>Tr√¢n tr·ªçng,<br/><b>ƒê·ªôi ng≈© c·ª≠a h√†ng</b></p>";

                    await _emailSender.SendEmailAsync(emailTo, subject, message);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng: {ex.Message}");
            }

            return new APIRespone<Order>
            {
                Success = true,
                Message = "Th√™m ƒë∆°n h√†ng th√†nh c√¥ng v√† ƒë√£ g·ª≠i email x√°c nh·∫≠n",
                Data = entity
            };
        }


        public async Task<APIRespone<bool>> DeleteAsync(int id)
        {
            var order = await _context.Orders
                .Include(o => o.Notifications)
                .FirstOrDefaultAsync(o => o.OrderId == id);

            if (order == null)
                return new APIRespone<bool> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng", Data = false };

            // ‚úÖ X√≥a notification li√™n quan
            if (order.Notifications != null)
                _context.Notifications.RemoveRange(order.Notifications);

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();

            return new APIRespone<bool> { Success = true, Message = "X√≥a ƒë∆°n h√†ng th√†nh c√¥ng", Data = true };
        }


        
        public async Task<APIRespone<Order>> GetByIdAsync(int id)
        {
            var order = await _context.Orders
                .Include(o => o.Users)
                .Include(o => o.Shipping)
                .Include(o => o.OrderDetails)
                    .ThenInclude(od => od.Product)
                .Include(o => o.Payments)
                .FirstOrDefaultAsync(o => o.OrderId == id);

            if (order == null)
            {
                return new APIRespone<Order>
                {
                    Success = false,
                    Message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
                    Data = null
                };
            }

            return new APIRespone<Order>
            {
                Success = true,
                Message = "L·∫•y ƒë∆°n h√†ng th√†nh c√¥ng",
                Data = order
            };
        }

        public async Task<APIRespone<Order>> UpdateAsync(int id, Order entity)
        {
            var order = await _context.Orders
                .Include(o => o.Shipping)
                .FirstOrDefaultAsync(o => o.OrderId == id);

            if (order == null)
            {
                return new APIRespone<Order>
                {
                    Success = false,
                    Message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
                    Data = null
                };
            }

            // ‚úÖ L∆∞u l·∫°i th√¥ng tin shipper c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            var oldShipperId = order.ShipperId;
            var oldStatus = order.Status;

            // ‚úÖ C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi
            _context.Entry(order).CurrentValues.SetValues(entity);
            await _context.SaveChangesAsync();

            // üß† G·ª≠i th√¥ng b√°o khi tr·∫°ng th√°i ƒë∆°n h√†ng thay ƒë·ªïi
            if (oldStatus != order.Status)
            {
                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = order.UserId,
                    OrderId = order.OrderId,
                    Title = "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
                    Message = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t sang tr·∫°ng th√°i: {order.Status}.",
                    Type = NotificationType.Order,
                    IsRead = false,
                    CreatedAt = DateTime.UtcNow
                });
            }

            // üß† G·ª≠i th√¥ng b√°o khi shipper ƒë∆∞·ª£c thay ƒë·ªïi
            if (oldShipperId != order.ShipperId && order.ShipperId != null)
            {
                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = order.UserId,
                    OrderId = order.OrderId,
                    Title = "C·∫≠p nh·∫≠t th√¥ng tin giao h√†ng",
                    Message = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ ƒë∆∞·ª£c g√°n cho shipper m·ªõi.",
                    Type = NotificationType.Shipping,
                    IsRead = false,
                    CreatedAt = DateTime.UtcNow
                });
            }

            try
            {
                var email = order.Shipping?.Email;
                if (!string.IsNullOrEmpty(email))
                {
                    string subject = $"C·∫≠p nh·∫≠t ƒë∆°n h√†ng #{order.OrderId}";
                    string message = $@"
                <h3>Xin ch√†o {order.Shipping?.RecipientName},</h3>
                <p>ƒê∆°n h√†ng <strong>#{order.OrderId}</strong> c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t.</p>
                <p><b>Tr·∫°ng th√°i hi·ªán t·∫°i:</b> {order.Status}</p>";

                    // ‚ûï N·∫øu c√≥ thay ƒë·ªïi shipper, th√™m n·ªôi dung v√†o email
                    if (oldShipperId != order.ShipperId && order.ShipperId != null)
                    {
                        message += "<p><b>Shipper m·ªõi</b> ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ƒë·ªÉ giao ƒë∆°n h√†ng c·ªßa b·∫°n.</p>";
                    }

                    message += $@"
                <p><b>Ng√†y ƒë·∫∑t:</b> {order.OrderDate:dd/MM/yyyy}</p>
                <p><b>T·ªïng ti·ªÅn:</b> {order.TotalAmount:N0} ƒë</p>
                <br/>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i c·ª≠a h√†ng!</p>";

                    await _emailSender.SendEmailAsync(email, subject, message);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói g·ª≠i email: {ex.Message}");
            }

            return new APIRespone<Order>
            {
                Success = true,
                Message = "C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng v√† ƒë√£ g·ª≠i th√¥ng b√°o email",
                Data = order
            };
        }


        public async Task<APIRespone<PagedResponse<Order>>> GetPageAsync(int pageNow, int pageSize)
        {
            var query = _context.Orders
                .Include(o => o.Users)
                .Include(o => o.Shipping)
                .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Product)
                .Include(o => o.Payments)
                .OrderByDescending(o => o.OrderDate)
                .AsQueryable();

            var totalCount = await query.CountAsync();
            var totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);

            var data = await query
                .Skip((pageNow - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            var response = new PagedResponse<Order>
            {
                Data = data,
                PageNow = pageNow,
                PageSize = pageSize,
                TotalPage = totalPage,
                TotalCount = totalCount
            };

            return new APIRespone<PagedResponse<Order>>
            {
                Success = true,
                Message = "L·∫•y danh s√°ch ƒë∆°n h√†ng ph√¢n trang th√†nh c√¥ng",
                Data = response
            };
        }

        public async Task<APIRespone<PagedResponse<OrderDisplayDto>>> Searchdto(int pageNow, int pageSize, SearchOrder search)
        {
            var query = _context.Orders
                .Include(o => o.Shipping)
                .AsQueryable();

            // üîç T√¨m ki·∫øm theo t·ª´ kh√≥a
            if (!string.IsNullOrEmpty(search.Keyword))
            {
                var keyword = search.Keyword.ToLower();

                if (int.TryParse(search.Keyword, out int orderId))
                {
                    query = query.Where(o => o.OrderId == orderId);
                }
                else if (Enum.TryParse<OrderStatus>(search.Keyword, true, out var status))
                {
                    query = query.Where(o => o.Status == status);
                }
                else
                {
                    query = query.Where(o =>
                        (o.Shipping != null && (
                            (o.Shipping.RecipientName ?? "").ToLower().Contains(keyword) ||
                            (o.Shipping.Email ?? "").ToLower().Contains(keyword) ||
                            (o.Shipping.Address ?? "").ToLower().Contains(keyword)
                        )));
                }
            }

            // üìÖ L·ªçc theo ng√†y ƒë·∫∑t
            if (search.FromDate.HasValue)
            {
                var from = search.FromDate.Value.Date;
                query = query.Where(o => o.OrderDate >= from);
            }

            if (search.ToDate.HasValue)
            {
                var to = search.ToDate.Value.Date.AddDays(1).AddSeconds(-1);
                query = query.Where(o => o.OrderDate <= to);
            }

            // üí∞ L·ªçc theo t·ªïng ti·ªÅn
            if (search.MinAmount.HasValue)
                query = query.Where(o => o.TotalAmount >= search.MinAmount.Value);

            if (search.MaxAmount.HasValue)
                query = query.Where(o => o.TotalAmount <= search.MaxAmount.Value);

            // üìä Ph√¢n trang
            var totalCount = await query.CountAsync();
            var totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);

            var data = await query
                .OrderByDescending(o => o.OrderDate)
                .Skip((pageNow - 1) * pageSize)
                .Take(pageSize)
                .Select(o => new OrderDisplayDto
                {
                    OrderId = o.OrderId,
                    OrderDate = o.OrderDate,
                    TotalAmount = o.TotalAmount,
                    Status = o.Status.ToString(),
                    RecipientName = o.Shipping != null ? o.Shipping.RecipientName : null,
                    Email = o.Shipping != null ? o.Shipping.Email : null,
                    Address = o.Shipping != null ? o.Shipping.Address : null
                })
                .ToListAsync();

            var response = new PagedResponse<OrderDisplayDto>
            {
                Data = data,
                PageNow = pageNow,
                PageSize = pageSize,
                TotalPage = totalPage,
                TotalCount = totalCount
            };

            return new APIRespone<PagedResponse<OrderDisplayDto>>
            {
                Success = true,
                Message = "T√¨m ki·∫øm ƒë∆°n h√†ng th√†nh c√¥ng",
                Data = response
            };
        }

        public async Task<APIRespone<IEnumerable<Order>>> GetByUserIdAsync(int userId)
        {
            var orders = await _context.Orders
                .Include(o => o.Shipping)
                .Include(o => o.OrderDetails).ThenInclude(od => od.Product)
                .Include(o => o.Payments)
                .Where(o => o.UserId == userId)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();

            return new APIRespone<IEnumerable<Order>>
            {
                Success = true,
                Message = "L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng theo UserId th√†nh c√¥ng",
                Data = orders
            };
        }




        public async Task<APIRespone<IEnumerable<Order>>> GetOrdersForShipperAsync()
        {
            var orders = await _context.Orders
                .Include(o => o.Shipping)
                .Include(o => o.Payments)
                .Where(o => o.Status == OrderStatus.Confirmed || o.Status == OrderStatus.Shipping)
                .ToListAsync();

            return new APIRespone<IEnumerable<Order>>
            {
                Success = true,
                Data = orders,
                Message = "Danh s√°ch ƒë∆°n h√†ng c·∫ßn giao"
            };
        }


        public async Task<APIRespone<Order>> CompleteOrderByShipperAsync(int orderId)
        {
            var order = await _context.Orders
                .Include(o => o.Payments)
                .FirstOrDefaultAsync(o => o.OrderId == orderId);

            if (order == null)
                return new APIRespone<Order> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" };

            // C·∫≠p nh·∫≠t Payment n·∫øu ch∆∞a thanh to√°n
            var payment = order.Payments?.OrderByDescending(p => p.CreatedAt).FirstOrDefault();
            if (payment != null && payment.PaymentStatus == PaymentStatus.Pending)
            {
                payment.PaymentStatus = PaymentStatus.Paid;
                payment.PaidAt = DateTime.Now;
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            order.Status = OrderStatus.Completed;

            await _context.SaveChangesAsync();
            // üöö G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng
            await _notificationRepo.AddAsync(new Notification
            {
                UserId = order.UserId,
                OrderId = order.OrderId,
                Title = "ƒê∆°n h√†ng ƒë√£ giao th√†nh c√¥ng",
                Message = $"ƒê∆°n h√†ng #{order.OrderId} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.",
                Type = NotificationType.Shipping,
                IsRead = false,
                CreatedAt = DateTime.UtcNow
            });

            // üí∞ N·∫øu ƒë∆°n h√†ng ƒë√£ thanh to√°n
            if (order.Payments?.Any(p => p.PaymentStatus == PaymentStatus.Paid) == true)
            {
                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = order.UserId,
                    OrderId = order.OrderId,
                    Title = "Thanh to√°n th√†nh c√¥ng",
                    Message = $"ƒê∆°n h√†ng #{order.OrderId} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng.",
                    Type = NotificationType.Payment,
                    IsRead = false,
                    CreatedAt = DateTime.UtcNow
                });
            }

            return new APIRespone<Order>
            {
                Success = true,
                Data = order,
                Message = "Shipper ƒë√£ giao h√†ng v√† thanh to√°n th√†nh c√¥ng"
            };
        }

        public async Task<APIRespone<IEnumerable<ShipperOrderDto>>> GetAvailableOrdersForShipperAsync()
        {
            var orders = await _context.Orders
                .Include(o => o.Shipping)
                .Include(o => o.Payments)
                .Where(o => o.Status == OrderStatus.Confirmed)
                .Select(o => new ShipperOrderDto
                {
                    OrderId = o.OrderId,
                    TotalAmount = o.TotalAmount,
                    CustomerName = o.Shipping != null ? o.Shipping.RecipientName : "·∫®n danh",
                    PhoneNumber = o.Shipping != null ? o.Shipping.PhoneNumber : "Kh√¥ng c√≥",
                    Email = o.Shipping.Email ?? "",
                    Address = o.Shipping.Address ?? "",
                    City = o.Shipping.City ?? "",
                    PostalCode = o.Shipping.PostalCode ?? "",
                    ShippingFee = o.Shipping.ShippingFee ?? 0,
                    Status = o.Status.ToString(),
                    PaymentStatus = o.Payments
                        .OrderByDescending(p => p.PaymentId)
                        .Select(p => p.PaymentStatus.ToString())
                        .FirstOrDefault() ?? "Ch∆∞a thanh to√°n"
                })
                .ToListAsync();

            return new APIRespone<IEnumerable<ShipperOrderDto>>
            {
                Success = true,
                Data = orders,
                Message = "Danh s√°ch ƒë∆°n h√†ng c√≥ th·ªÉ nh·∫≠n giao"
            };
        }

        public async Task<APIRespone<Order>> AssignOrderToShipperAsync(int orderId, int shipperId)
        {
            var order = await _context.Orders
                .Include(o => o.Shipping)
                .Include(o => o.Users)
                .FirstOrDefaultAsync(o => o.OrderId == orderId);

            if (order == null)
                return new APIRespone<Order> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" };

            var shipper = await _context.Users.FindAsync(shipperId);
            if (shipper == null || shipper.Role != UserRole.Shipper)
                return new APIRespone<Order> { Success = false, Message = "Ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá" };

            // N·∫øu ƒë∆°n ƒë√£ c√≥ shipper th√¨ kh√¥ng cho nh·∫≠n n·ªØa
            if (order.ShipperId != null && order.ShipperId > 0)
                return new APIRespone<Order> { Success = false, Message = "ƒê∆°n h√†ng ƒë√£ c√≥ shipper kh√°c nh·∫≠n" };

            // ‚úÖ C·∫≠p nh·∫≠t shipper v√† tr·∫°ng th√°i
            order.ShipperId = shipperId;
            order.Status = OrderStatus.Shipping;

            await _context.SaveChangesAsync();

            // üîî Th√¥ng b√°o trong h·ªá th·ªëng
            await _notificationRepo.AddAsync(new Notification
            {
                UserId = order.UserId,
                OrderId = order.OrderId,
                Title = "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c g√°n shipper",
                Message = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ ƒë∆∞·ª£c giao cho shipper {shipper.FullName}.",
                Type = NotificationType.Shipping,
                IsRead = false,
                CreatedAt = DateTime.UtcNow
            });

            // üìß G·ª≠i email cho kh√°ch h√†ng
            try
            {
                var email = order.Shipping?.Email;
                if (!string.IsNullOrEmpty(email))
                {
                    string subject = $"ƒê∆°n h√†ng #{order.OrderId} ƒëang ƒë∆∞·ª£c giao";
                    string message = $@"
                <h3>Xin ch√†o {order.Shipping?.RecipientName},</h3>
                <p>ƒê∆°n h√†ng <strong>#{order.OrderId}</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g√°n cho shipper <b>{shipper.FullName}</b>.</p>
                <p><b>Tr·∫°ng th√°i hi·ªán t·∫°i:</b> {order.Status}</p>
                <p><b>Ng√†y ƒë·∫∑t:</b> {order.OrderDate:dd/MM/yyyy}</p>
                <p><b>T·ªïng ti·ªÅn:</b> {order.TotalAmount:N0} ƒë</p>
                <br/>
                <p>Shipper s·∫Ω li√™n h·ªá s·ªõm ƒë·ªÉ giao h√†ng. C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i c·ª≠a h√†ng!</p>";

                    await _emailSender.SendEmailAsync(email, subject, message);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói g·ª≠i email khi g√°n shipper: {ex.Message}");
            }

            return new APIRespone<Order>
            {
                Success = true,
                Data = order,
                Message = $"Shipper (ID: {shipperId}) ƒë√£ nh·∫≠n ƒë∆°n #{orderId}"
            };
        }


        public async Task<APIRespone<IEnumerable<object>>> GetOrdersOfShipperAsync(int shipperId)
        {
            var orders = await _context.Orders
                .Include(o => o.Shipping)
                .Include(o => o.Payments)
                .Where(o => o.ShipperId == shipperId &&
                            (o.Status == OrderStatus.Shipping || o.Status == OrderStatus.Confirmed))
                .Select(o => new
                {
                    o.OrderId,
                    o.TotalAmount,
                    CustomerName = o.Shipping.RecipientName ?? "·∫®n danh",
                    PhoneNumber = o.Shipping.PhoneNumber ?? "Kh√¥ng c√≥",
                    Email = o.Shipping.Email ?? "",
                    Address = o.Shipping.Address ?? "",
                    City = o.Shipping.City ?? "",
                    PostalCode = o.Shipping.PostalCode ?? "",
                    ShippingFee = o.Shipping.ShippingFee,
                    Status = o.Status.ToString(),
                    PaymentStatus = o.Payments
                        .OrderByDescending(p => p.PaymentId)
                        .Select(p => p.PaymentStatus.ToString())
                        .FirstOrDefault() ?? "Ch∆∞a thanh to√°n"
                })
                .ToListAsync();

            return new APIRespone<IEnumerable<object>>
            {
                Success = true,
                Data = orders,
                Message = "Danh s√°ch ƒë∆°n h√†ng c·ªßa shipper"
            };
        }


        public async Task<APIRespone<Order>> CompleteOrderByShipperAsync(int orderId, int shipperId)
        {
            var order = await _context.Orders
                .Include(o => o.Payments)
                .Include(o => o.Shipping)
                .Include(o => o.Users)
                .FirstOrDefaultAsync(o => o.OrderId == orderId);

            if (order == null)
                return new APIRespone<Order> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" };

            if (order.ShipperId != shipperId)
                return new APIRespone<Order> { Success = false, Message = "B·∫°n kh√¥ng ph·∫£i l√† shipper c·ªßa ƒë∆°n h√†ng n√†y" };

            if (order.Status != OrderStatus.Shipping)
                return new APIRespone<Order> { Success = false, Message = "ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c giao ho·∫∑c ƒë√£ ho√†n t·∫•t" };

            var payment = order.Payments?.OrderByDescending(p => p.CreatedAt).FirstOrDefault();
            if (payment != null)
            {
                payment.PaymentStatus = PaymentStatus.Paid;
                payment.PaidAt = DateTime.Now;
            }

            order.Status = OrderStatus.Completed;
            await _context.SaveChangesAsync();

            // üîî Th√¥ng b√°o trong h·ªá th·ªëng
            await _notificationRepo.AddAsync(new Notification
            {
                UserId = order.UserId,
                OrderId = order.OrderId,
                Title = "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng",
                Message = $"ƒê∆°n h√†ng #{order.OrderId} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.",
                Type = NotificationType.Shipping,
                IsRead = false,
                CreatedAt = DateTime.UtcNow
            });

            // üìß G·ª≠i email th√¥ng b√°o ho√†n t·∫•t
            try
            {
                var email = order.Shipping?.Email;
                if (!string.IsNullOrEmpty(email))
                {
                    string subject = $"ƒê∆°n h√†ng #{order.OrderId} ƒë√£ giao th√†nh c√¥ng";
                    string message = $@"
                <h3>Xin ch√†o {order.Shipping?.RecipientName},</h3>
                <p>ƒê∆°n h√†ng <strong>#{order.OrderId}</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.</p>
                <p><b>Tr·∫°ng th√°i:</b> {order.Status}</p>
                <p><b>Ng√†y ho√†n t·∫•t:</b> {DateTime.Now:dd/MM/yyyy HH:mm}</p>
                <p><b>T·ªïng ti·ªÅn:</b> {order.TotalAmount:N0} ƒë</p>
                <br/>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i c·ª≠a h√†ng!</p>";

                    await _emailSender.SendEmailAsync(email, subject, message);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói g·ª≠i email khi ho√†n t·∫•t giao h√†ng: {ex.Message}");
            }

            return new APIRespone<Order>
            {
                Success = true,
                Data = order,
                Message = $"Shipper #{shipperId} ƒë√£ ho√†n t·∫•t giao ƒë∆°n #{orderId}"
            };
        }


        public async Task<APIRespone<PagedResponse<OrderDisplayDto>>> GetAllAsync(int pageNow = 1, int pageSize = 10)
        {
            var query = _context.Orders
                .Include(o => o.Shipping)
                .OrderByDescending(o => o.OrderDate)
                .AsQueryable();

            var totalCount = await query.CountAsync();
            var totalPage = (int)Math.Ceiling(totalCount / (double)pageSize);

            var data = await query
                .Skip((pageNow - 1) * pageSize)
                .Take(pageSize)
                .Select(o => new OrderDisplayDto
                {
                    OrderId = o.OrderId,
                    OrderDate = o.OrderDate,
                    TotalAmount = o.TotalAmount,
                    Status = o.Status.ToString(),
                    RecipientName = o.Shipping != null ? o.Shipping.RecipientName : null,
                    Email = o.Shipping != null ? o.Shipping.Email : null,
                    Address = o.Shipping != null ? o.Shipping.Address : null
                })
                .ToListAsync();

            var response = new PagedResponse<OrderDisplayDto>
            {
                Data = data,
                PageNow = pageNow,
                PageSize = pageSize,
                TotalPage = totalPage,
                TotalCount = totalCount
            };

            return new APIRespone<PagedResponse<OrderDisplayDto>>
            {
                Success = true,
                Message = "L·∫•y danh s√°ch ƒë∆°n h√†ng c√≥ ph√¢n trang th√†nh c√¥ng",
                Data = response
            };
        }


        Task<APIRespone<IEnumerable<Order>>> IType<Order>.GetAllAsync()
        {
            throw new NotImplementedException();
        }

        Task<APIRespone<PagedResponse<Order>>> IOrderRepository.Search(int pageNow, int pageSize, SearchOrder search)
        {
            throw new NotImplementedException();
        }
    }
}
