using API.Data;
using API.Models;
using API.Repositories.IRepositories;
using API.Repositories.RestAPI;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace API.Repositories
{
    public class UserRepository : IUserRepository
    {
        private readonly DataContext _context;
        private readonly INotificationRepository _notificationRepo;

        public UserRepository(DataContext context, INotificationRepository notificationRepo)
        {
            _context = context;
            _notificationRepo = notificationRepo;
        }

        public async Task<APIRespone<List<User>>> GetAllUsersAsync()
        {
            var response = new APIRespone<List<User>>();
            response.Data = await _context.Users.ToListAsync();
            response.Success = true;
            return response;
        }

        public async Task<APIRespone<User>> GetUserByIdAsync(int id)
        {
            var response = new APIRespone<User>();
            var user = await _context.Users.FindAsync(id);
            response.Data = user;
            response.Success = user != null;
            response.Message = user == null ? "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" : "Th√†nh c√¥ng";
            return response;
        }

        public async Task<APIRespone<User>> CreateUserAsync(User model)
        {
            var response = new APIRespone<User>();

            // ‚úÖ B·∫Øt bu·ªôc c√≥ password khi t·∫°o
            if (string.IsNullOrWhiteSpace(model.Password))
                return new APIRespone<User>
                {
                    Success = false,
                    Message = "Password l√† b·∫Øt bu·ªôc"
                };

            // (khuy·∫øn ngh·ªã) ch·∫∑n tr√πng email
            if (await _context.Users.AnyAsync(u => u.Email == model.Email))
                return new APIRespone<User>
                {
                    Success = false,
                    Message = "Email ƒë√£ t·ªìn t·∫°i"
                };

            // ‚úÖ Hash
            model.PasswordHash = BCrypt.Net.BCrypt.HashPassword(model.Password);
            model.Password = null;

            // ‚úÖ KH√îNG auto n√¢ng quy·ªÅn; gi·ªØ nguy√™n model.Role g·ª≠i t·ª´ UI
            // ‚úÖ CreatedAt: c√≥ default ·ªü entity (UtcNow), c√≥ th·ªÉ ƒë·ªÉ nguy√™n



            _context.Users.Add(model);
            await _context.SaveChangesAsync();

            // Kh√¥ng c·∫ßn set r·ªóng v√¨ ƒë√£ JsonIgnore, nh∆∞ng gi·ªØ c≈©ng kh√¥ng sao
            model.PasswordHash = string.Empty;

            response.Data = model;
            response.Success = true;
            response.Message = "Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng";
            return response;
        }

        //public async Task<APIRespone<User>> UpdateUserAsync(int id, User model)
        //{
        //    var user = await _context.Users.FindAsync(id);
        //    if (user == null)
        //        return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

        //    // üß© N·∫øu client kh√¥ng g·ª≠i role h·ª£p l·ªá th√¨ gi·ªØ nguy√™n role c≈©
        //    if (!Enum.IsDefined(typeof(UserRole), model.Role))
        //        model.Role = user.Role;

        //    user.FullName = model.FullName;
        //    user.Email = model.Email;
        //    user.Phone = model.Phone;
        //    user.Address = model.Address;
        //    user.Role = model.Role;

        //    await _context.SaveChangesAsync();

        //    return new APIRespone<User>
        //    {
        //        Success = true,
        //        Data = user,
        //        Message = "C·∫≠p nh·∫≠t th√†nh c√¥ng"
        //    };
        //}

        public async Task<APIRespone<User>> UpdateUserAsync(int id, User model)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
                return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

            // üß© Gi·ªØ nguy√™n gi√° tr·ªã c≈© n·∫øu client kh√¥ng g·ª≠i (null ho·∫∑c r·ªóng)
            if (!string.IsNullOrWhiteSpace(model.FullName))
                user.FullName = model.FullName;

            if (!string.IsNullOrWhiteSpace(model.Email))
                user.Email = model.Email;

            if (!string.IsNullOrWhiteSpace(model.Phone))
                user.Phone = model.Phone;

            if (!string.IsNullOrWhiteSpace(model.Address))
                user.Address = model.Address;

            // üß© Gi·ªØ nguy√™n Role
            if (Enum.IsDefined(typeof(UserRole), model.Role))
                user.Role = model.Role;

            await _context.SaveChangesAsync();

            return new APIRespone<User>
            {
                Success = true,
                Data = user,
                Message = "C·∫≠p nh·∫≠t th√†nh c√¥ng"
            };
        }

        public async Task<APIRespone<bool>> DeleteUserAsync(int id)
        {
            var response = new APIRespone<bool>();
            try
            {
                var user = await _context.Users.FindAsync(id);
                if (user == null)
                {
                    response.Success = false;
                    response.Data = false;
                    response.Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng";
                    return response;
                }

                _context.Users.Remove(user);
                await _context.SaveChangesAsync();

                response.Success = true;
                response.Data = true;
                response.Message = "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng";
            }
            catch (DbUpdateException dbEx)
            {
                // X·∫£y ra khi c√≥ r√†ng bu·ªôc kh√≥a ngo·∫°i
                response.Success = false;
                response.Data = false;
                response.Message = "Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng v√¨ c√≥ d·ªØ li·ªáu li√™n quan (ƒë∆°n h√†ng, thanh to√°n).";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Data = false;
                response.Message = "L·ªói m√°y ch·ªß: " + ex.Message;
            }

            return response;
        }


        public async Task<APIRespone<List<User>>> SearchUsersAsync(string searchTerm)
        {
            var response = new APIRespone<List<User>>();
            response.Data = await _context.Users
                .Where(u => u.FullName.Contains(searchTerm) || u.Email.Contains(searchTerm))
                .ToListAsync();
            response.Success = true;
            response.Message = "T√¨m ki·∫øm th√†nh c√¥ng";
            return response;
        }

        public async Task<APIRespone<PagedResponse<User>>> GetPageAsync(int pageNow, int pageSize, string? search = null)
        {
            if (pageNow <= 0) pageNow = 1;
            if (pageSize <= 0) pageSize = 10;

            var response = new APIRespone<PagedResponse<User>>();

            IQueryable<User> query = _context.Users.AsQueryable();

            if (!string.IsNullOrWhiteSpace(search))
            {
                var keyword = search.Trim();
                query = query.Where(u =>
                    u.FullName.Contains(keyword) ||
                    u.Email.Contains(keyword) ||
                    u.Phone.Contains(keyword));
            }

            var totalCount = await query.CountAsync();
            var totalPage = (int)Math.Ceiling((double)totalCount / pageSize);

            var data = await query
                .OrderBy(u => u.UserId)
                .Skip((pageNow - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            response.Data = new PagedResponse<User>
            {
                Data = data,                  // IEnumerable<User>
                PageNow = pageNow,
                PageSize = pageSize,
                TotalCount = totalCount,
                TotalPage = totalPage
            };
            response.Success = true;
            return response;
        }



        public async Task<APIRespone<User>> UpgradeToShipperAsync(int userId, string cccdImageUrl)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null)
                return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y user" };

            user.Role = UserRole.Shipper;
            // b·∫°n c√≥ th·ªÉ l∆∞u th√™m th√¥ng tin cccdImageUrl n·∫øu mu·ªën
            await _context.SaveChangesAsync();

            return new APIRespone<User> { Success = true, Data = user, Message = "ƒê√£ c·∫≠p nh·∫≠t th√†nh Shipper" };
        }
        public async Task<APIRespone<User>> RequestShipperAsync(int userId, string cccdFrontUrl, string cccdBackUrl)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null)
                return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

            // üö´ N·∫øu ƒë√£ l√† Shipper th√¨ kh√¥ng cho g·ª≠i y√™u c·∫ßu n·ªØa
            if (user.Role == UserRole.Shipper)
                return new APIRespone<User> { Success = false, Message = "T√†i kho·∫£n ƒë√£ l√† shipper" };

            // ‚úÖ Ghi l·∫°i th√¥ng tin ·∫£nh v√† tr·∫°ng th√°i ch·ªù duy·ªát
            user.CccdFrontUrl = cccdFrontUrl;
            user.CccdBackUrl = cccdBackUrl;
            user.IsShipperRequestPending = true;

            // üö´ KH√îNG thay ƒë·ªïi Role ·ªü ƒë√¢y ‚Äî v·∫´n gi·ªØ l√† Customer
            await _context.SaveChangesAsync();

            return new APIRespone<User>
            {
                Success = true,
                Data = user,
                Message = "ƒê√£ g·ª≠i y√™u c·∫ßu ƒëƒÉng k√Ω Shipper, vui l√≤ng ch·ªù admin x√©t duy·ªát"
            };
        }

        //public async Task<APIRespone<User>> ApproveShipperRequestAsync(int userId, bool isApproved)
        //{
        //    var user = await _context.Users.FindAsync(userId);
        //    if (user == null)
        //        return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

        //    if (!user.IsShipperRequestPending)
        //        return new APIRespone<User> { Success = false, Message = "Ng∆∞·ªùi n√†y ch∆∞a g·ª≠i y√™u c·∫ßu Shipper" };

        //    if (isApproved)
        //    {
        //        user.Role = UserRole.Shipper;
        //        user.IsShipperRequestPending = false;
        //        await _context.SaveChangesAsync();
        //        return new APIRespone<User> { Success = true, Data = user, Message = "‚úÖ ƒê√£ ph√™ duy·ªát Shipper" };
        //    }
        //    else
        //    {
        //        user.IsShipperRequestPending = false;
        //        user.CccdFrontUrl = null;
        //        user.CccdBackUrl = null;
        //        await _context.SaveChangesAsync();
        //        return new APIRespone<User> { Success = true, Data = user, Message = "‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu Shipper" };
        //    }
        //}
        //public async Task<APIRespone<User>> ApproveShipperRequestAsync(int userId, bool isApproved)
        //{
        //    var user = await _context.Users.FindAsync(userId);
        //    if (user == null)
        //        return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

        //    if (!user.IsShipperRequestPending)
        //        return new APIRespone<User> { Success = false, Message = "Ng∆∞·ªùi n√†y ch∆∞a g·ª≠i y√™u c·∫ßu Shipper" };

        //    if (isApproved)
        //    {
        //        user.Role = UserRole.Shipper;
        //        user.IsShipperRequestPending = false;
        //        await _context.SaveChangesAsync();

        //        // ‚úÖ G·ª≠i th√¥ng b√°o cho user
        //        await _notificationRepo.AddAsync(new Notification
        //        {
        //            UserId = user.UserId,
        //            Title = "Y√™u c·∫ßu Shipper ƒë√£ ƒë∆∞·ª£c duy·ªát",
        //            Message = "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n tr·ªü th√†nh Shipper.",
        //            Type = NotificationType.RoleUpdate,
        //            IsRead = false,
        //            CreatedAt = DateTime.UtcNow
        //        });

        //        return new APIRespone<User> { Success = true, Data = user, Message = "‚úÖ ƒê√£ ph√™ duy·ªát Shipper" };
        //    }
        //    else
        //    {
        //        user.IsShipperRequestPending = false;
        //        user.CccdFrontUrl = null;
        //        user.CccdBackUrl = null;
        //        await _context.SaveChangesAsync();

        //        await _notificationRepo.AddAsync(new Notification
        //        {
        //            UserId = user.UserId,
        //            Title = "Y√™u c·∫ßu Shipper ƒë√£ ƒë∆∞·ª£c duy·ªát",
        //            Message = "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n tr·ªü th√†nh Shipper.",
        //            Type = NotificationType.RoleUpdate, // ‚úÖ ƒë√∫ng ki·ªÉu enum
        //            IsRead = false,
        //            CreatedAt = DateTime.UtcNow
        //        });


        //        return new APIRespone<User> { Success = true, Data = user, Message = "‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu Shipper" };
        //    }

        //}
        public async Task<APIRespone<User>> ApproveShipperRequestAsync(int userId, bool isApproved)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null)
                return new APIRespone<User> { Success = false, Message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

            if (!user.IsShipperRequestPending)
                return new APIRespone<User> { Success = false, Message = "Ng∆∞·ªùi n√†y ch∆∞a g·ª≠i y√™u c·∫ßu Shipper" };

            if (isApproved)
            {
                // ‚úÖ Duy·ªát
                user.Role = UserRole.Shipper;
                user.IsShipperRequestPending = false;
                await _context.SaveChangesAsync();

                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = user.UserId,
                    Title = "Y√™u c·∫ßu Shipper ƒë√£ ƒë∆∞·ª£c duy·ªát",
                    Message = "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n tr·ªü th√†nh Shipper c·ªßa c·ª≠a h√†ng.",
                    Type = NotificationType.RoleUpdate,
                    IsRead = false,
                    CreatedAt = DateTime.UtcNow
                });

                return new APIRespone<User>
                {
                    Success = true,
                    Data = user,
                    Message = "‚úÖ ƒê√£ ph√™ duy·ªát Shipper"
                };
            }
            else
            {
                // ‚ùå T·ª´ ch·ªëi
                user.IsShipperRequestPending = false;
                user.CccdFrontUrl = null;
                user.CccdBackUrl = null;
                await _context.SaveChangesAsync();

                await _notificationRepo.AddAsync(new Notification
                {
                    UserId = user.UserId,
                    Title = "Y√™u c·∫ßu Shipper b·ªã t·ª´ ch·ªëi",
                    Message = "R·∫•t ti·∫øc! Y√™u c·∫ßu ƒëƒÉng k√Ω Shipper c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
                    Type = NotificationType.RoleUpdate,
                    IsRead = false,
                    CreatedAt = DateTime.UtcNow
                });

                return new APIRespone<User>
                {
                    Success = true,
                    Data = user,
                    Message = "‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu Shipper"
                };
            }
        }

    }
}
