using API.Data;
using API.Models;
using API.Repositories.IRepositories;
using API.Repositories.RestAPI;
using Microsoft.EntityFrameworkCore;

namespace API.Repositories
{
    public class ProductRepository : IProductRepository
    {
        private readonly DataContext _context;
        private readonly IWebHostEnvironment _environment;

        public ProductRepository(DataContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        // Th√™m m·ªõi s·∫£n ph·∫©m
        public async Task<APIRespone<Product>> AddAsync(Product entity)
        {
            var response = new APIRespone<Product>();

            try
            {
                // Ki·ªÉm tra CategoryId c√≥ t·ªìn t·∫°i kh√¥ng
                var categoryExists = await _context.Categories.AnyAsync(c => c.CategoryId == entity.CategoryId);
                if (!categoryExists)
                {
                    response.Success = false;
                    response.Message = "Danh m·ª•c kh√¥ng t·ªìn t·∫°i";
                    return response;
                }

                _context.Products.Add(entity);
                await _context.SaveChangesAsync();

                response.Success = true;
                response.Message = "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng";
                response.Data = entity;
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi th√™m s·∫£n ph·∫©m: {ex.Message}";
            }

            return response;
        }

        // X√≥a s·∫£n ph·∫©m v√† file ·∫£nh
        public async Task<APIRespone<bool>> DeleteAsync(int id)
        {
            var response = new APIRespone<bool>();

            try
            {
                var product = await _context.Products.FindAsync(id);
                if (product == null)
                {
                    response.Success = false;
                    response.Message = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                    response.Data = false;
                    return response;
                }

                // X√≥a file ·∫£nh n·∫øu c√≥
                if (!string.IsNullOrEmpty(product.ImageUrl) && !product.ImageUrl.StartsWith("http"))
                {
                    try
                    {
                        var fileName = Path.GetFileName(product.ImageUrl);
                        var filePath = Path.Combine(_environment.WebRootPath, "uploads", "products", fileName);
                        
                        if (File.Exists(filePath))
                        {
                            File.Delete(filePath);
                            Console.WriteLine($"üóëÔ∏è Deleted image file: {filePath}");
                        }
                    }
                    catch (Exception fileEx)
                    {
                        Console.WriteLine($"‚ö†Ô∏è Warning: Could not delete image file: {fileEx.Message}");
                        // Kh√¥ng return l·ªói, v·∫´n ti·∫øp t·ª•c x√≥a s·∫£n ph·∫©m
                    }
                }

                _context.Products.Remove(product);
                await _context.SaveChangesAsync();

                response.Success = true;
                response.Message = "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng";
                response.Data = true;
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi x√≥a s·∫£n ph·∫©m: {ex.Message}";
                response.Data = false;
            }

            return response;
        }

        // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
        public async Task<APIRespone<IEnumerable<Product>>> GetAllAsync()
        {
            var response = new APIRespone<IEnumerable<Product>>();

            try
            {
                var data = await _context.Products
                    .Include(p => p.Category)
                    .OrderByDescending(p => p.CreatedAt)
                    .ToListAsync();

                response.Success = true;
                response.Data = data;
                response.Message = "L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m: {ex.Message}";
            }

            return response;
        }

        // L·∫•y s·∫£n ph·∫©m theo ID
        public async Task<APIRespone<Product>> GetByIdAsync(int id)
        {
            var response = new APIRespone<Product>();

            try
            {
                var product = await _context.Products
                    .Include(p => p.Category)
                    .FirstOrDefaultAsync(p => p.ProductId == id);

                if (product == null)
                {
                    response.Success = false;
                    response.Message = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                }
                else
                {
                    response.Success = true;
                    response.Data = product;
                    response.Message = "L·∫•y th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng";
                }
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi l·∫•y s·∫£n ph·∫©m: {ex.Message}";
            }

            return response;
        }

        // Ph√¢n trang s·∫£n ph·∫©m
        public async Task<APIRespone<PagedResponse<Product>>> GetPageAsync(int pageNow, int pageSize)
        {
            var response = new APIRespone<PagedResponse<Product>>();

            try
            {
                var totalCount = await _context.Products.CountAsync();
                var totalPage = (int)Math.Ceiling((double)totalCount / pageSize);

                var data = await _context.Products
                    .Include(p => p.Category)
                    .OrderByDescending(p => p.CreatedAt)
                    .Skip((pageNow - 1) * pageSize)
                    .Take(pageSize)
                    .ToListAsync();

                var pageResponse = new PagedResponse<Product>
                {
                    Data = data,
                    PageNow = pageNow,
                    PageSize = pageSize,
                    TotalPage = totalPage,
                    TotalCount = totalCount
                };

                response.Success = true;
                response.Data = pageResponse;
                response.Message = "L·∫•y d·ªØ li·ªáu ph√¢n trang s·∫£n ph·∫©m th√†nh c√¥ng";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi ph√¢n trang s·∫£n ph·∫©m: {ex.Message}";
            }

            return response;
        }

        // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
        public async Task<APIRespone<Product>> UpdateAsync(int id, Product entity)
        {
            var response = new APIRespone<Product>();

            try
            {
                var product = await _context.Products.FindAsync(id);
                if (product == null)
                {
                    response.Success = false;
                    response.Message = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                    return response;
                }

                // Ki·ªÉm tra CategoryId c√≥ t·ªìn t·∫°i kh√¥ng
                var categoryExists = await _context.Categories.AnyAsync(c => c.CategoryId == entity.CategoryId);
                if (!categoryExists)
                {
                    response.Success = false;
                    response.Message = "Danh m·ª•c kh√¥ng t·ªìn t·∫°i";
                    return response;
                }

                // X√≥a file ·∫£nh c≈© n·∫øu c√≥ ·∫£nh m·ªõi v√† ·∫£nh c≈© kh√°c ·∫£nh m·ªõi
                if (!string.IsNullOrEmpty(product.ImageUrl) && 
                    !string.IsNullOrEmpty(entity.ImageUrl) && 
                    product.ImageUrl != entity.ImageUrl &&
                    !product.ImageUrl.StartsWith("http"))
                {
                    try
                    {
                        var oldFileName = Path.GetFileName(product.ImageUrl);
                        var oldFilePath = Path.Combine(_environment.WebRootPath, "uploads", "products", oldFileName);
                        
                        if (File.Exists(oldFilePath))
                        {
                            File.Delete(oldFilePath);
                            Console.WriteLine($"üóëÔ∏è Deleted old image file: {oldFilePath}");
                        }
                    }
                    catch (Exception fileEx)
                    {
                        Console.WriteLine($"‚ö†Ô∏è Warning: Could not delete old image file: {fileEx.Message}");
                    }
                }

                product.Name = entity.Name;
                product.Description = entity.Description;
                product.Price = entity.Price;
                product.StockQuantity = entity.StockQuantity;
                product.ImageUrl = entity.ImageUrl;
                product.CategoryId = entity.CategoryId;

                _context.Products.Update(product);
                await _context.SaveChangesAsync();

                // Load category ƒë·ªÉ tr·∫£ v·ªÅ
                await _context.Entry(product)
                    .Reference(p => p.Category)
                    .LoadAsync();

                response.Success = true;
                response.Message = "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng";
                response.Data = product;
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m: {ex.Message}";
            }

            return response;
        }

        // L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
        public async Task<APIRespone<IEnumerable<Product>>> GetProductsByCategoryAsync(int categoryId)
        {
            var response = new APIRespone<IEnumerable<Product>>();

            try
            {
                var data = await _context.Products
                    .Include(p => p.Category)
                    .Where(p => p.CategoryId == categoryId)
                    .OrderByDescending(p => p.CreatedAt)
                    .ToListAsync();

                response.Success = true;
                response.Data = data;
                response.Message = "L·∫•y s·∫£n ph·∫©m theo danh m·ª•c th√†nh c√¥ng";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c: {ex.Message}";
            }

            return response;
        }

        // T√¨m ki·∫øm s·∫£n ph·∫©m
        public async Task<APIRespone<IEnumerable<Product>>> SearchProductsAsync(string searchTerm)
        {
            var response = new APIRespone<IEnumerable<Product>>();

            try
            {
                var query = _context.Products
                    .Include(p => p.Category)
                    .AsQueryable();

                if (!string.IsNullOrEmpty(searchTerm))
                {
                    query = query.Where(p => 
                        p.Name.Contains(searchTerm) ||
                        (p.Description != null && p.Description.Contains(searchTerm)) ||
                        p.Category.Name.Contains(searchTerm));
                }

                var data = await query
                    .OrderByDescending(p => p.CreatedAt)
                    .ToListAsync();

                response.Success = true;
                response.Data = data;
                response.Message = "T√¨m ki·∫øm s·∫£n ph·∫©m th√†nh c√¥ng";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: {ex.Message}";
            }

            return response;
        }

        // L·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t
        public async Task<APIRespone<IEnumerable<Product>>> GetNewestProductsAsync(int count)
        {
            var response = new APIRespone<IEnumerable<Product>>();

            try
            {
                var data = await _context.Products
                    .Include(p => p.Category)
                    .OrderByDescending(p => p.CreatedAt)
                    .Take(count)
                    .ToListAsync();

                response.Success = true;
                response.Data = data;
                response.Message = "L·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t th√†nh c√¥ng";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = $"L·ªói khi l·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t: {ex.Message}";
            }

            return response;
        }
    }
}
